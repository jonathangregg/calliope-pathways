constraints:
  emissions_targets:
    description: Limit emissions produced per timestep by a % of initial timestep
    foreach: [investsteps]
    where: emissions_max_ratio AND emissions_initial
    equations:
        - expression: >-
            sum(cost[costs=emissions], over=[nodes, techs])
            <= emissions_max_ratio * emissions_initial

  limit_imports:
    description: Limit imports to a percentage of total flow in each timestep
    foreach: [nodes,techs,timesteps,investsteps]
    where: import_max
    equations:
        - expression: >-
            sum(flow_out*import_max,over=[techs,carriers])
            >= sum(flow_out[techs=$import_tech],over=[carriers])
    slices:
      import_tech:
        - expression: import_electricity

  fix_exports:
    description: WIP Set exports to a percentage of total flow in each timestep
    foreach: [nodes,techs,timesteps,investsteps]
    where: export_min
    equations:
        - expression: >-
            sum(flow_out*import_max,over=[techs,carriers])
            == sum(flow_out[techs=$export_tech],over=[carriers])
    slices:
      export_tech:
        - expression: export_electricity

  limit_flow_cap_new_max_rate_fixed:
    description: Limit maximum rate of new capacity build-out
    foreach: [techs, carriers, investsteps]
    where: flow_cap AND flow_cap_new_max_rate_fixed
    equations:
      - expression:
          sum(default_if_empty(flow_cap_new, 0)
          * available_vintages, over=[vintagesteps, nodes])
          <= flow_cap_new_max_rate_fixed
    sub_expressions:
      prev_flow_cap:
        - where: NOT investsteps=get_val_at_index(investsteps=0)
          expression: roll(flow_cap, investsteps=1)
        - where: investsteps=get_val_at_index(investsteps=0) AND flow_cap_initial > 0
          expression: flow_cap_initial

  balance_demand:
    equations:
    - where: sink_use_equals
      expression: flow_in_inc_eff == sink_use_equals * $sink_scaler * demand_growth_factor * electrification_factor
      
    - where: NOT sink_use_equals AND sink_use_max
      expression: flow_in_inc_eff <= sink_use_max * $sink_scaler * demand_growth_factor * electrification_factor

  #carbon_budget_carryover:
  #min_capacity_inc:
